import math
class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)] 
        self.current_winner = None  # Keep track of the winner
    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')
    @staticmethod
    def print_board_nums():
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')
    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']
    def empty_squares(self):
        return ' ' in self.board
    def num_empty_squares(self):
        return self.board.count(' ')
    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False
    def winner(self, square, letter):
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all([spot == letter for spot in diagonal2]):
                return True
        return False

def minimax(position, maximizing_player, alpha, beta):
    if position.current_winner == 'X':
        return {'position': None, 'score': 1}
    elif position.current_winner == 'O':
        return {'position': None, 'score': -1}
    elif not position.empty_squares():
        return {'position': None, 'score': 0}

    if maximizing_player:
        max_eval = {'position': None, 'score': -math.inf}
        for possible_move in position.available_moves():
            position.make_move(possible_move, 'X')
            evaluation = minimax(position, False, alpha, beta)
            position.board[possible_move] = ' '
            evaluation['position'] = possible_move
            max_eval = max(max_eval, evaluation, key=lambda x: x['score'])
            alpha = max(alpha, max_eval['score'])
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = {'position': None, 'score': math.inf}
        for possible_move in position.available_moves():
            position.make_move(possible_move, 'O')
            evaluation = minimax(position, True, alpha, beta)
            position.board[possible_move] = ' '
            evaluation['position'] = possible_move
            min_eval = min(min_eval, evaluation, key=lambda x: x['score'])
            beta = min(beta, min_eval['score'])
            if beta <= alpha:
                break
        return min_eval

def get_human_move(board):
    valid_square = False
    val = None
    while not valid_square:
        square = input("Enter your move (0-8): ")
        try:
            val = int(square)
            if val not in board.available_moves():
                raise ValueError
            valid_square = True
        except ValueError:
            print("Invalid square. Try again.")
    return val

def play_game():
    game = TicTacToe()
    print("Reference Board:")
    game.print_board_nums()
    print("Start the game!\n")
    game.print_board()
    while game.empty_squares():
        if game.current_winner is None:
            if game.num_empty_squares() == 1:
                square = game.available_moves()[0]
            else:
                if game.current_winner == 'O':
                    move = minimax(game, True, -math.inf, math.inf)
                    square = move['position']
                else:
                    move = minimax(game, False, -math.inf, math.inf)
                    square = move['position']
        else:
            break
        if game.make_move(square, 'X'):
            print(f'Player X makes move to square {square}')
            game.print_board()
            print('')
            if game.current_winner:
                print(f'Player {game.current_winner} wins!')
                break
        else:
            print('Square is already occupied!')
            continue

        if game.empty_squares():
            if game.current_winner == 'X':
                move = minimax(game, True, -math.inf, math.inf)
                square = move['position']
            else:
                square = get_human_move(game)
            if game.make_move(square, 'O'):
                print(f'Player O makes move to square {square}')
                game.print_board()
                print('')
                if game.current_winner:
                    print(f'Player {game.current_winner} wins!')
                    break
            else:
                print('Square is already occupied!')
                continue

    if not game.current_winner:
        print("It's a tie!")

play_game()
